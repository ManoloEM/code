{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "{%\n",
    "  \\large \\textbf{Lab1: Discrete-Time Models} \\\\\n",
    "    \\textit{by Manuel Enciso Martinez}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pylab import *\n",
    "from numpy import *\n",
    "\n",
    "\"DATA\"\n",
    "meandensity = array([2,0,14,34,56,94,189,266,330,416,507,580,610,513,593,557,560,522,565,517,500,585,500,495,525,510])\n",
    "days = 25\n",
    "dayslist = [0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,24]\n",
    "top = 540 # the moment pn+1 â‰¤ pn happend at day 12\n",
    "\n",
    "\n",
    "def grow(pn,cte):\n",
    "    return(cte*(top-pn)*pn)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We find a method to estimate C using only days 2 through 12. Since day 1 does not have mean density data.\n",
    "\n",
    "We are using the formula $C_n = \\frac{p_{n+1}-p_n}{540-p_n}$ for $n \\in \\{2,3,\\dots,11\\}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "En = zeros(days)\n",
    "Cn = zeros(days)\n",
    "\n",
    "\n",
    "for i in range(2,11):\n",
    "    Cn[i] = (meandensity[i+1] - meandensity[i]) / ((top-meandensity[i])*meandensity[i])\n",
    "    erracum = zeros(9)\n",
    "    for j in range(2,11):\n",
    "        erracum[j-2] = abs((grow(meandensity[j],Cn[i])+meandensity[j])-meandensity[j+1]) \n",
    "        #we compare the estimation with our data\n",
    "    En[i-2] = max(erracum) #we choose for the error of Cn the biggest erracum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49.54301948051943"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(En[0:8])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the lowest error our method calculates, then we choose $c = c_4$, which corresponds to our lowest error.\n",
    "\n",
    "Let us try another estimation of c by taking the mean of all our $c_n$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "C1 = Cn[2] #C with lowest error\n",
    "C2 = sum(Cn)/9 #Mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "()"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def graf1(): \n",
    "    figure('Paramecium aurelia estimation #1')\n",
    "    xlabel('Days')\n",
    "    ylabel('Density')\n",
    "    Lx = linspace(0,days,100)\n",
    "    plot(dayslist+ones(len(dayslist)),meandensity[dayslist],'*',color='black')\n",
    "    Pn = 2 #day 0 start 2 mean density\n",
    "    plot(0,Pn ,'.',color='red',label='estimation')\n",
    "    for i in dayslist:\n",
    "        plot(i+1,grow(Pn,C1)+Pn ,'.',color='red')\n",
    "        Pn = grow(Pn,C1)+Pn\n",
    "    legend(['Data', 'Simulated'])\n",
    "    return()\n",
    "\n",
    "graf1()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\textit{Simulation with $c_1$}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "()"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def graf2(): \n",
    "    figure('Paramecium aurelia estimation #2')\n",
    "    xlabel('Days')\n",
    "    ylabel('Density')\n",
    "    Lx = linspace(0,days,100)\n",
    "    plot(dayslist+ones(len(dayslist)),meandensity[dayslist],'*',color='black')\n",
    "    Pn = 2 #day 0 start 2 mean density\n",
    "    plot(0,Pn ,'.',color='blue',label='estimation')\n",
    "    for i in dayslist:\n",
    "        plot(i+1,grow(Pn,C2)+Pn ,'.',color='blue')\n",
    "        Pn = grow(Pn,C2)+Pn\n",
    "    legend(['Data', 'Simulated'])\n",
    "    return()\n",
    "\n",
    "graf2()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\textit{Simulation with $c_2$}$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\textbf{1.2:}$ Recall that the choice to use the number 540 in this equation was rather arbitrary. Try to improve the model.\n",
    "\n",
    "In this program, we sum the values at the moment when the density \n",
    "starts to decrease and we average those values to get a better peak value. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "An alternative peak value would be 539.9375\n"
     ]
    }
   ],
   "source": [
    "def prop(A): \n",
    "    daysacum = dayslist[1] #we start by the day 1 since it doesnt has data      \n",
    "    while(A[daysacum] < A[daysacum+1] and len(A)-3>=daysacum):\n",
    "        daysacum += 1\n",
    "    if A[daysacum] > A[daysacum+1]:\n",
    "        minimo = min(A[daysacum:len(A)])\n",
    "        while(A[daysacum] > minimo):\n",
    "            daysacum -= 1\n",
    "        if A[daysacum] <= minimo:\n",
    "            daysacum +=1\n",
    "        C = sum(A[daysacum:len(A)])/len(A[daysacum:len(A)])\n",
    "    else:\n",
    "        print('List',A,'doesnt stop incrising')\n",
    "    return(C)\n",
    "    \n",
    "print('An alternative peak value would be',prop(meandensity))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then 540 was a good choice for our peak value."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
